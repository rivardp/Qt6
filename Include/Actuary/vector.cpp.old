// PVector.cpp    Version 3.4

#include "PVector.h"

template <typename Type>
void PVector<Type>::init(const Type *array, unsigned long int sz)
{
	size = sz;
	data = new Type[size];
	assert (data != 0);
	for (unsigned long int index=0;index<size;index++)
        data[index] = (array != 0) ? array[index] : static_cast<Type>(0);
}

template <typename Type>
PVector<Type>::PVector() : size(0), data(0)
{
init(0,0); 
}

template <typename Type>
PVector<Type>::PVector(PVector<Type> *origVec)
{
	size = origVec->size;
	data = new Type[size];
	assert(data != 0);
	for (unsigned long int index = 0; index<size; index++)
		data[index] = (*origVec)[index];
}

template <typename Type>
PVector<Type>::PVector(const PVector<Type> &origVec)
{
	size = origVec.size;
	data = new Type[size];
	assert(data != 0);
	for (unsigned long int index = 0; index<size; index++)
		data[index] = origVec[index];
}

template <typename Type>
PVector<Type>::PVector(unsigned long int sz)
{
	init(0,sz);
}

template <typename Type>
PVector<Type>::PVector(const Type *array, unsigned long int sz)
{
	init(array,sz);
}

template <typename Type>
PVector<Type>::PVector(const Type start, unsigned long int numelem, const Type r)
{
	size = numelem;
	data = new Type[size];
	assert (data != 0);
	for (unsigned long int index=0;index<size;index++)
        data[index] = static_cast<Type>(start + index * r);
}

template <typename Type>
PVector<Type>::~PVector()
{
	size = 0;
	delete []data;
}

template <typename Type>
unsigned long int PVector<Type>::getSize() const
{
	return size;
}

template <typename Type>
unsigned int PVector<Type>::isFound(const long double target, unsigned int decimals) const
{
	long int a,b;
	for (unsigned long int index=0; index<size; index++)
	{
        a = static_cast<long int>(data[index] * powl(10,decimals)+ 0.5);
        b = static_cast<long int>(target * powl(10,decimals) + 0.5);
		if (a==b) return 1;
	}
	return 0;
}

template <typename Type>
unsigned int PVector<Type>::getPosition(const long double target, unsigned int decimals) const
{
	long int a,b;
	for (unsigned int index=0; index<size; index++)
	{
        a = static_cast<long int>(data[index] * powl(10,decimals)+ 0.5);
        b = static_cast<long int>(target * powl(10,decimals) + 0.5);
		if (a==b) return index;
	}
	return 0;
}

template <typename Type>
void PVector<Type>::reSize(unsigned long int sz)
{
    Type *origPVector = data;
	data = new Type[sz];
	for (unsigned long int index=0;index<sz;index++)
        data[index] = (index >= size) ? static_cast<Type>(0) : origPVector[index];
	size=sz;
    delete []origPVector;
}

template <typename Type>
void PVector<Type>::display() const
{
	for (unsigned long int index=0;index<size;index++) {
		if(0==index%3) std::cout << std::endl;
		std::cout.setf(std::ios::showpoint);
		std::cout << std::setw(4) << index << " : " << std::setw(12) << data[index] << "   ";
	}
	std::cout << std::endl;
}

template <typename Type>
PVector<unsigned int> PVector<Type>::sort(int direction)
{
	// 1 = ascending  -1=descending 
    PVector<unsigned int> origPositions(0,size,1);
	unsigned int i,j,tempPos;
	Type temp,sign;
    sign = static_cast<Type>(direction);
	i = j = 0;
	for (i=0; i<size; i++)
	{
		for (j=i+1; j<size; j++)
		{
			if ((sign*data[size-j+i]) < (sign*data[size-j+i-1]))
			{
				temp = data[size-j+i];
				data[size-j+i] = data[size-j+i-1];
				data[size-j+i-1] = temp;
				tempPos = origPositions[size-j+i];
				origPositions[size-j+i] = origPositions[size-j+i-1];
				origPositions[size-j+i-1]= tempPos;
			}
		}
	}
	return origPositions;
}

template <typename Type>
unsigned int PVector<Type>::removeDuplicates(int direction)
{
	unsigned int dupe = 0;

	// 1 = ascending  0=same order -1=descending 
	if (size <= 1)
		return dupe;
	
	unsigned int i,j;
	Type lastNum;
    PVector<Type> tempVec(*this);
    PVector<unsigned int> sortingVec;
	if (direction == 0)
		sortingVec = tempVec.sort(1);
	else
		sortingVec = tempVec.sort(direction);
	delete[]data;
	data = 0;
	size = tempVec.countUnique();
	dupe = (size < tempVec.getSize()) ? 1 : 0;
	data = new Type[size];
    PVector<unsigned int> origOrder(0,size,1);
	lastNum = data[0] = tempVec[0];
	origOrder[0] = sortingVec[0];
	i=j=1;
	while ((j<size) && (i<tempVec.getSize()))
	{
		if (tempVec[i] != lastNum)
		{
			data[j] = tempVec[i];
			lastNum = tempVec[i];
			origOrder[j] = sortingVec[i];
			j++;
		}
		i++;
	}
	if (direction == 0)   // return to original order
	{
        PVector<Type> tempData(*this);
        PVector<unsigned int> newOrder;
		newOrder = origOrder.sort(1);
		for (i=0; i<size; i++)
			data[i] = tempData[newOrder[i]];
	}
	return dupe;
}

template <typename Type>
unsigned int PVector<Type>::countUnique() const
{
	if (size <= 1)
        return static_cast<unsigned int>(size);
	
	unsigned int numUnique = 1;
	unsigned int i;
    PVector<Type> temp(*this);
	temp.sort();
	Type lastValue = temp[0];
	for (i=1; i<size; i++)
	{
		if (temp[i] != lastValue)
		{
			numUnique++;
			lastValue = temp[i];
		}
	}
	return numUnique;
}

template <typename Type>
void PVector<Type>::append(const Type num)
{
	unsigned long int newSize = size + 1;
	this->reSize(newSize);
	data[newSize-1] = num;
}

template <typename Type>
int PVector<Type>::add(const Type num)
{
	this->append(num);
	return this->removeDuplicates(1);
}

template <typename Type>
int PVector<Type>::del(const Type num, unsigned int decimals)
{
    int deleted = 0;
	while (this->isFound(num,decimals) && (size >= 1))
	{
		deleted = 1;
		unsigned long int newSize = size - 1;
		unsigned long int i = 0;
        Type *origPVector = data;
		data = new Type[newSize];
		for (unsigned long int index=0; index<size; index++)
		{
            if (origPVector[index] != num)
			{
                data[i] = origPVector[index];
				i++;
			}
		}
		size = newSize;
        delete []origPVector;
	}
	return deleted;
}

template <typename Type>
void PVector<Type>::write(FILE *outFile)
{
	if (!outFile){
		std::cerr << "Output file not open. Write not executed.\n";
		return;
	}
	else
		for (unsigned long int index=0;index<size;index++) {
			if(0==index%3) fprintf(outFile,"\n");
            fprintf(outFile,"%2d:%10.4f          ",index,static_cast<float>(data[index]));
	}
	fprintf(outFile,"\n\n");
}

template <typename Type>
Type PVector<Type>::maxValue() const
{
	Type max_val = data[0];
	for (unsigned long int index=1; index<size; index++)
		if (data[index]>max_val) max_val = data[index];
	return max_val;
}

template <typename Type>
Type PVector<Type>::minValue() const
{
	Type min_val = data[0];
	for (unsigned long int index=1; index<size; index++)
		if (data[index]<min_val) min_val = data[index];
	return min_val;
}

template <typename Type>
Type PVector<Type>::sum() const
{
	Type sum = 0;
	for (unsigned long int index=0; index<size; index++)
		sum+=data[index];
	return sum;
}

template <typename Type>
PVector<Type> vmax(const PVector<Type> &v1,const PVector<Type> &v2)
{
	unsigned long int tempSize = v1.getSize();
	if (v2.getSize() != tempSize) {
		//std::cerr << "Range error on max()" << std::endl;
		exit(1);
	}
    PVector<Type> temp(tempSize);
	for (unsigned long int index=0;index<tempSize;index++)
		temp[index] = (v1[index] > v2[index]) ? v1[index] : v2[index];
	return temp;
}

template <typename Type>
PVector<Type> vmin(const PVector<Type> &v1,const PVector<Type> &v2)
{
	unsigned long int tempSize = v1.getSize();
	if (v2.getSize() != tempSize) {
		//std::cerr << "Range error on min()" << std::endl;
		exit(1);
	}
    PVector<Type> temp(tempSize);
	for (unsigned long int index=0;index<tempSize;index++)
		temp[index] = (v1[index] < v2[index]) ? v1[index] : v2[index];
	return temp;
}

template <typename Type>
PVector<Type>& PVector<Type>::operator=(const PVector<Type> &rhs)
{
	if (this == &rhs) return *this;

	delete[]data;
	size = rhs.getSize();
	data = new Type[size];
	assert (data != 0);
	for (unsigned long int index=0;index<size;index++)
		data[index] = rhs[index];
	return *this;
}

template <typename Type>
PVector<Type>& PVector<Type>::operator=(const long double &scalar)
{
	for (unsigned long int index=0; index<size; index++)
        data[index]= static_cast<Type>(scalar);
	return *this;
}

template <typename Type>
const Type& PVector<Type>::operator[](unsigned long int elem) const
{
	if (elem >= size) {
		//std::cerr << "Range error on index" << std::endl;
		exit(1);
	}
	return data[elem];
}

template <typename Type>
Type& PVector<Type>::operator[](unsigned long int elem)
{
	if (elem >= size) {
		//std::cerr << "Range error on index" << std::endl;
		exit(1);
	}
	return data[elem];
}

template <typename Type>
PVector<Type> PVector<Type>::operator-() const
{
    PVector<Type> temp(size);
	for (unsigned long int index=0; index<size; index++)
		temp[index] = -data[index];
	return temp;
}

template <typename Type>
PVector<Type> operator+(const PVector<Type> &v1,const PVector<Type> &v2)
{
	unsigned long int tempSize = v1.getSize();
	if (v2.getSize() != tempSize) {
	//	std::cerr << "Range error on addition" << std::endl;
		exit(1);
	}
    PVector<Type> temp(tempSize);
	for (unsigned long int index=0;index<tempSize;index++)
		temp[index] = v1[index] + v2[index];
	return temp;
}

template <typename Type>
PVector<Type> operator-(const PVector<Type> &v1,const PVector<Type> &v2)
{
	unsigned long int tempSize = v1.getSize();
	if (v2.getSize() != tempSize) {
	//	std::cerr << "Range error on subtraction" << std::endl;
		exit(1);
	}
    PVector<Type> temp(tempSize);
	for (unsigned long int index=0;index<tempSize;index++)
		temp[index] = v1[index] - v2[index];
	return temp;
}

template <typename Type>
PVector<Type> operator*(const PVector<Type> &v1,const PVector<Type> &v2)
{
	unsigned long int tempSize = v1.getSize();
	if (v2.getSize() != tempSize) {
		//std::cerr << "Range error on multiplication" << std::endl;
		exit(1);
	}
    PVector<Type> temp(tempSize);
	for (unsigned long int index=0;index<tempSize;index++)
		temp[index] = v1[index] * v2[index];
	return temp;
}

template<typename Type>
PVector<Type> operator/(const PVector<Type> &v1, const PVector<Type> &v2)
{ 
	return v1 * !v2; 
}

template <typename Type>
PVector<Type> PVector<Type>::operator+(const long double &scalar) const
{
    PVector<Type> temp(size);
	for (unsigned long int index=0; index<size; index++)
		temp[index] = data[index] + scalar;
	return temp;
}

template<typename Type>
PVector<Type> operator+(const long double &scalar, const PVector<Type> &v1)
{ 
	return v1 + scalar; 
}

template <typename Type>
PVector<Type> PVector<Type>::operator-(const long double &scalar) const
{
    PVector<Type> temp(size);
	for (unsigned long int index=0; index<size; index++)
		temp[index] = data[index] - scalar;
	return temp;
}

template<typename Type>
PVector<Type> operator-(const long double &scalar, const PVector<Type> &v1)
{ 
	return -v1 + scalar; 
}

template <typename Type>
PVector<Type> PVector<Type>::operator*(const long double &scalar) const
{
    PVector<Type> temp(size);
	for (unsigned long int index=0; index<size; index++)
		temp[index] = data[index] * scalar;
	return temp;
}

template<typename Type>
PVector<Type> operator*(const long double &scalar, const PVector<Type> &v1)
{ 
	return v1 * scalar; 
}

template <typename Type>
PVector<Type> PVector<Type>::operator/(const long double &scalar) const
{
    PVector<Type> temp(size);
	for (unsigned long int index=0; index<size; index++)
		temp[index] = data[index] / scalar;
	return temp;
}

template<typename Type>
PVector<Type> operator/(const long double &scalar, const PVector<Type> &v1)
{ 
	return !v1 * scalar; 
}

template <typename Type>
PVector<Type> operator^(const long double &scalar,const PVector<Type> &v1)
{
	unsigned long int tempSize = v1.getSize();
    PVector<Type> temp(tempSize);

	for (unsigned long int index=0; index<tempSize; index++)
		temp[index] = powl(scalar,v1[index]);
	return temp;
}

template <typename Type>
PVector<Type> operator!(const PVector<Type> &v1)
{
	unsigned long int tempSize = v1.getSize();
    PVector<Type> temp(tempSize);
	for (unsigned long int index=0; index<tempSize; index++)
		temp[index] = (Type(1)) / v1[index];
	return temp;
}

template <typename Type>
PVector<Type>& PVector<Type>::operator+=(const PVector<Type> &v1)
{
	if (size != v1.getSize()){
		//std::cerr << "Range error on addition" << std::endl;
		exit(1);
	}
	for (unsigned long int index=0; index<size; index++)
		data[index]+=v1[index];
	return *this;
}

template <typename Type>
PVector<Type>& PVector<Type>::operator-=(const PVector<Type> &v1)
{
	if (size != v1.getSize()){
		//std::cerr << "Range error on subtraction" << std::endl;
		exit(1);
	}
	for (unsigned long int index=0; index<size; index++)
		data[index]-=v1[index];
	return *this;
}

template <typename Type>
PVector<Type>& PVector<Type>::operator*=(const PVector<Type> &v1)
{
	if (size != v1.getSize()){
		//std::cerr << "Range error on multiplication" << std::endl;
		exit(1);
	}
	for (unsigned long int index=0; index<size; index++)
		data[index]*=v1[index];
	return *this;
}

template <typename Type>
PVector<Type>& PVector<Type>::operator/=(const PVector<Type> &v1)
{
	if (size != v1.getSize()){
		//std::cerr << "Range error on division" << std::endl;
		exit(1);
	}
	for (unsigned long int index=0; index<size; index++)
		data[index]/=v1[index];
	return *this;
}

template <typename Type>
PVector<Type>& PVector<Type>::operator+=(const long double &scalar)
{
	for (unsigned long int index=0; index<size; index++)
		data[index]+=scalar;
	return *this;
}

template <typename Type>
PVector<Type>& PVector<Type>::operator-=(const long double &scalar)
{
	for (unsigned long int index=0; index<size; index++)
		data[index]-=scalar;
	return *this;
}

template <typename Type>
PVector<Type>& PVector<Type>::operator*=(const long double &scalar)
{
	for (unsigned long int index=0; index<size; index++)
		data[index]*=scalar;
	return *this;
}

template <typename Type>
PVector<Type>& PVector<Type>::operator/=(const long double &scalar)
{
	for (unsigned long int index=0; index<size; index++)
		data[index]/=scalar;
	return *this;
}

template <typename Type>
bool PVector<Type>::operator==(const PVector<Type> &v1) const
{
	if (size != v1.getSize())
		return false;

	bool stillMatched = true;
	unsigned int index = 0;
	while (stillMatched && (index < size))
	{
		if (data[index] != v1[index])
			stillMatched = false;
		index++;
	}
	return stillMatched;
}

template <typename Type>
bool PVector<Type>::operator!=(const PVector<Type> &v1) const
{
	return !((*this) == v1);
}

template <typename Type>
PVector<long double>& PVector<Type>::asLongDouble() const
{
    PVector<long double> vld(size);
	for (unsigned long int index = 0; index<size; index++)
        vld[index] = static_cast<long double>(data[index]);
	return vld;
}
